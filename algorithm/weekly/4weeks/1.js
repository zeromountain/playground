/*
[문제 설명]
표를 여러 방법으로 정렬하려 합니다. 표의 각 행은 고유 번호, 이름, 푼 문제 수의 3개의
필드로 이루어집니다. 다음의 3가지 방법으로 표를 정렬하여 정렬된 행의 고유 번호를
출력하는 프로그램을 작성해야 합니다.
1. 고유 번호 오름차순 정렬
2. 이름 사전 순 정렬
3. 푼 문제 수 내림차순 정렬

[제한 사항]
- 고유 번호는 10억 이하의 양의 정수이며, 서로 겹치지 않는 경우만 주어집니다.
- 이름은 길이 50 이하로, 알파벳 소문자로만 이루어져 있으며 서로 겹치지 않는 경우만
주어집니다.
- 푼 문제 수는 10억 이하의 양의 정수이며, 서로 겹치지 않는 경우만 주어집니다.
- 처음 주어지는 배열은 정렬되어 있지 않을 수 있습니다.

[입력 형식]
- 표의 각행이 담긴 길이 N의 배열이 주어집니다. 각 원소는 길이 3의 배열입니다.
(1 <= N <= 100,000)
[출력 형식]
- 크기가 3인 배열을 리턴 합니다. i번째 원소는 길이 N의 i번째 방법으로 정렬된 표에서의
각각의 고유 번호입니다.

[입출력예시 #1]
input [[1, "john", 38], [2, "alex", 188], [3, "ben", 302]]
output [[1, 2, 3], [2, 3, 1], [3, 2, 1]]

[입출력예시 #2]
input [[51, "a", 11], [56, "aa", 382], [17, "ab", 6]]
output [[17, 51, 56], [51, 56, 17], [56, 51,17]]
*/

function solution(rows) {
  let sort1 = []; // 고유번호 순
  let sort2 = []; // 이름 순
  let sort3 = []; // 문제 수

  // 고유 번호 오름차순
  rows.sort((a, b) => a[0] - b[0]).forEach(row => sort1.push(row[0]));

  // 이름 순
  rows
    .sort((a, b) => {
      if (a[1] < b[1]) return -1;
      if (a[1] > b[1]) return 1;
      if (a[1] === b[1]) return 0;
    })
    .forEach(row => sort2.push(row[0]));

  // 문제 수
  rows.sort((a, b) => b[2] - a[2]).forEach(row => sort3.push(row[0]));

  console.log(sort1, sort2, sort3);

  return [sort1, sort2, sort3];
  // 고유번호 오름차순 → row[0].sort((a, b) => b - a)
  // 이름 사전 순→ row[1].sort()
  // 푼 문제수 → row[2].sort((a, b) => a - b)
  // return[0] → 고유번호순
  // return[1] → 이름순
  // return[2] → 푼 문제수
}

module.exports = solution;
