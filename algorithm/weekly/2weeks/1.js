/*
[문제 설명]
여기 N 명의 직원이 있다. 이 직원들로 하나의 팀을 구성하려 한다. 처음에는 각 직원이 자신이
대표인 팀을 하나씩 구성한다. 이때, 팀을 합치는 과정은 다음과 같다.
1. 소속된 팀이 다른 두 직원 A, B를 구한다.
2. A와 B가 소속된 팀의 대표 L_A, L_B를 구하고, 두 대표 중 하나를 다른 하나의 부하
직원으로 한다.
3. 모든 직원이 하나의 팀이 될 때까지 위의 과정을 반복한다.
각 직원은 자신의 직속 부하직원에게만 지시를 내릴 수 있다. 즉, 대표가 말단 직원에게 지시를
내리려면, 직속 부하직원에게 지시를 내리고, 그 부하직원이 자신의 부하직원에게 지시를
내리는 과정을 반복해야 하는 것이다. 빠른 일처리를 위해서는 이러한 계급 체계가 그리 많지
않은 것이 좋다.
직원의 수와, 팀을 합치는 과정에 대한 정보를 주었을 때, 필요한 최소한의 계급 체계의 수를
구하시오.

[제한 사항]
이미 같은 팀인 직원에 대해서 다시 팀을 합치는 식의 입력은 주어지지 않는다. 또한, 매개변수
connections으로 주어진 순서대로 팀을 합치면 모든 직원은 하나의 팀이 된다.

[입력 형식]
매개변수로 직원의 수 N (1 <= N <= 1,000)이 주어진다.
또한 object 배열 connections에 팀을 합치는 과정 N-1회에 대한 정보가 주어진다. {a:1, b:2}는
1번 직원과 2번 직원이 속한 팀을 합치라는 의미이다.
(1<=a, b<=N)

[출력 형식]
주어진 과정대로 팀을 구성했을 때, 필요한 최소한의 계급 체계의 수는 얼마인지 구하시오.

[입출력예시 #1]
N: 5
connections: [{a:1, b:2}, {a: 3, b: 4}, {a: 2, b: 3}, {a: 4, b: 5}]
output: 3

[입출력예시 #2]
N: 1
connections: []
output: 1
*/

/**
 * @param N {number}
 * @param connections {[{a: number, b: number}]}
 * @return {number}
 */

const getMinRole = (N, connections) => {
  if (N <= 3) return 1;
  return getMinRole(N - 1, connections) + 1;
};

console.log(
  getMinRole(5, [
    { a: 1, b: 2 },
    { a: 3, b: 4 },
    { a: 2, b: 3 },
    { a: 4, b: 5 },
  ])
);
